name: "AWS Deploy"

on:
  pull_request: 
    branches: 
      - main
    types: closed

env:
  AWS_REGION : "ap-northeast-1"
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

permissions:
  id-token: write
  contents: write

jobs:
  lint:
    if: github.event.pull_request.merged == true
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use nodejs
        uses: actions/setup-node@v4

      - name: Install deps
        run: npm ci
        
      - name: Run lint
        run: npm run lint

  test:
    if: github.event.pull_request.merged == true
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./app
    permissions:
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use nodejs
        uses: actions/setup-node@v4

      - name: Install deps
        run: npm ci
        
      - name: Run test
        run: npm run test
      
      - name: Report coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2


  build:
    needs: ["lint", "test"]
    if: github.event.pull_request.merged == true
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use nodejs
        uses: actions/setup-node@v4

      - name: Install deps
        run: npm ci
        
      - name: Run build
        run: npm run build

  deploy:
    needs: ["lint", "test", "build"]
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: ./app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Test s3 connection
        run: |
          aws s3 ls
          echo "AWS S3 connection successful!"
