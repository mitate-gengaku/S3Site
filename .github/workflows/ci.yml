name: "Lint and Test"

on:
  pull_request: 
    branches: 
      - main
    types: 
      - "opened"
      - "synchronize"
      - "reopened"

env:
  AWS_REGION : "ap-northeast-1"
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  TFSTATE_BUCKET: ${{ secrets.TFSTATE_BUCKET }}

permissions:
  id-token: write
  contents: write
  pull-requests: write
  issues: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: "./app"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use nodejs
        uses: actions/setup-node@v4

      - name: Install deps
        run: npm ci
        
      - name: Run lint
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: "./app"
    permissions:
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use nodejs
        uses: actions/setup-node@v4

      - name: Install deps
        run: npm ci
        
      - name: Run test
        run: npm run test
      
      - name: Report coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          working-directory: "./app"

  terraform:
    needs: ["lint", "test"]
    name: Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: "./terraform/prod"
    env:
      TF_VAR_github_org: ${{ secrets.ORGANIZATION_NAME }}
      TF_VAR_github_repository: ${{ secrets.REPOSITORY_NAME }}
      TF_VAR_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME  }}
      TF_VAR_website_domain: ${{ secrets.WEBSITE_DOMAIN  }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "^1.3.7"
          terraform_wrapper: false

      - name: Terraform format
        id: fmt
        run: terraform fmt -recursive -check -diff
        continue-on-error: true

      - name: Terraform init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TFSTATE_BUCKET }}" \
            -backend-config="key=state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION  }}" \
            -backend-config="encrypt=true"

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Preview plan result
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN  }}
          script: |

            const output = `### Terraformの各結果
            #### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`

            <details>
              <summary>terraform planの結果</summary>

             \`${{ steps.plan.outputs.stdout }}\`

            </details>`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
